#include <stdio.h>
#include <string.h>
int gcd(int a, int b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}
int modInverse(int a, int m) {
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1; 
}
void encrypt(char plaintext[], int key[2][2]) {
    int len = strlen(plaintext);
    int cipher[len];
    for (int i = 0; i < len; i += 2) {
        int p1 = plaintext[i] - 'a';
        int p2 = (i + 1 < len) ? plaintext[i + 1] - 'a' : 23;  
        cipher[i] = (key[0][0] * p1 + key[0][1] * p2) % 26;
        cipher[i + 1] = (key[1][0] * p1 + key[1][1] * p2) % 26;
    }
    printf("Cipher Text: ");
    for (int i = 0; i < len; i++) {
        printf("%c", cipher[i] + 'a');
    }
    printf("\n");
}
int main() {
    int key[2][2];
    char plaintext[100];
    printf("Enter a 2x2 key matrix (4 integers): ");
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            scanf("%d", &key[i][j]);
        }
    }
    int det = key[0][0] * key[1][1] - key[0][1] * key[1][0];
    int len;
    if (gcd(det, 26) != 1) {
        printf("Invalid key. Determinant should be coprime with 26.\n");
        return 1;
    }
    int modInv = modInverse(det, 26);
    if (modInv == -1) {
        printf("Modular inverse does not exist for the determinant.\n");
        return 1;
    }
    printf("Enter the plaintext (in lowercase, no spaces): ");
    scanf("%s", plaintext);
    len = strlen(plaintext);
    if (len % 2 != 0) {
        plaintext[len] = 'x';
        len++;
    }
    encrypt(plaintext, key);
    return 0;
}
